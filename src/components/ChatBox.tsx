import React, { useState } from 'react';
import '../styles/ChatBox.css';
import { FaComments, FaPaperPlane, FaTimes } from 'react-icons/fa';

const ChatBox: React.FC = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [message, setMessage] = useState('');
    const [isTyping, setIsTyping] = useState(false);

    // Danh s√°ch c√¢u tr·∫£ l·ªùi t·ª± ƒë·ªông
    const autoResponses = {
        default: "Xin l·ªói, t√¥i kh√¥ng hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n1. B·∫°n ƒë√£ c√≥ kinh nghi·ªám l·∫≠p tr√¨nh ch∆∞a?\n2. B·∫°n mu·ªën theo ƒëu·ªïi Frontend hay Backend?\n3. Th·ªùi gian h·ªçc mong mu·ªën c·ªßa b·∫°n?",
        
        greetings: [
            "Xin ch√†o! üëã T√¥i l√† tr·ª£ l√Ω t∆∞ v·∫•n c·ªßa EDUPATH. B·∫°n ƒëang quan t√¢m ƒë·∫øn lƒ©nh v·ª±c n√†o?",
            "Ch√†o b·∫°n! üòä ƒê·ªÉ t∆∞ v·∫•n t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt m·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n kh√¥ng?",
            "Hi! üåü R·∫•t vui ƒë∆∞·ª£c t∆∞ v·∫•n cho b·∫°n. B·∫°n ƒë√£ c√≥ ƒë·ªãnh h∆∞·ªõng v·ªÅ ngh·ªÅ nghi·ªáp ch∆∞a?"
        ],

        beginner: [
            "ƒê·ªëi v·ªõi ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu, EDUPATH c√≥ l·ªô tr√¨nh h·ªçc t·ª´ zero:\n1. Fundamental (2 th√°ng)\n2. Frontend/Backend Basic (4 th√°ng)\n3. Chuy√™n s√¢u (6 th√°ng)\nB·∫°n mu·ªën t√¨m hi·ªÉu giai ƒëo·∫°n n√†o?",
            "Ch√∫ng t√¥i c√≥ kh√≥a h·ªçc Bootcamp cho ng∆∞·ªùi m·ªõi:\n‚úÖ HTML, CSS, JavaScript c∆° b·∫£n\n‚úÖ T∆∞ duy l·∫≠p tr√¨nh\n‚úÖ Th·ª±c h√†nh d·ª± √°n\n‚úÖ Mentoring 1-1",
            "ƒê·ªÉ b·∫Øt ƒë·∫ßu, b·∫°n n√™n h·ªçc:\n1. Web Foundation (HTML, CSS)\n2. JavaScript Basics\n3. Git c∆° b·∫£n\nB·∫°n mu·ªën ƒëƒÉng k√Ω h·ªçc th·ª≠ mi·ªÖn ph√≠ kh√¥ng?"
        ],

        frontend: [
            "L·ªô tr√¨nh Frontend Developer (8 th√°ng):\n1. HTML/CSS Master (2 th√°ng)\n2. JavaScript Advanced (2 th√°ng)\n3. ReactJS (2 th√°ng)\n4. D·ª± √°n th·ª±c t·∫ø (2 th√°ng)\nM·ª©c l∆∞∆°ng: 15-35M/th√°ng",
            "Frontend roadmap chi ti·∫øt:\n1. Web Fundamentals\n2. UI/UX Principles\n3. JavaScript & ES6+\n4. React & Redux\n5. Responsive Design\n6. Performance & SEO",
            "K·ªπ nƒÉng Frontend c·∫ßn c√≥:\n‚úÖ HTML5 Semantic\n‚úÖ CSS3 & Flexbox/Grid\n‚úÖ JavaScript Modern\n‚úÖ React Ecosystem\n‚úÖ Git & DevTools"
        ],

        backend: [
            "L·ªô tr√¨nh Backend Developer (10 th√°ng):\n1. Programming Basic (2 th√°ng)\n2. Database & API (3 th√°ng)\n3. NodeJS/Python (3 th√°ng)\n4. DevOps Basic (2 th√°ng)\nM·ª©c l∆∞∆°ng: 20-40M/th√°ng",
            "Backend roadmap chi ti·∫øt:\n1. Algorithm & Data Structure\n2. Database Design\n3. RESTful API\n4. Authentication/Security\n5. Server Deployment",
            "K·ªπ nƒÉng Backend c·∫ßn c√≥:\n‚úÖ Server Programming\n‚úÖ Database Management\n‚úÖ API Development\n‚úÖ Security & Performance\n‚úÖ Cloud Services"
        ],

        career: [
            "C∆° h·ªôi vi·ªác l√†m sau kh√≥a h·ªçc:\nüë®‚Äçüíª Junior Developer (10-18M)\nüë®‚Äçüíª Mid-level (18-35M)\nüë®‚Äçüíª Senior (35-50M)\nCh√∫ng t√¥i cam k·∫øt h·ªó tr·ª£ t√¨m vi·ªác sau t·ªët nghi·ªáp!",
            "EDUPATH c√≥ c√°c ƒë·ªëi t√°c tuy·ªÉn d·ª•ng:\nüè¢ C√°c c√¥ng ty outsourcing\nüè¢ Product Company\nüè¢ Startup c√¥ng ngh·ªá\nB·∫°n mu·ªën tham gia bu·ªïi career talk kh√¥ng?",
            "H·ªó tr·ª£ vi·ªác l√†m:\n‚úÖ CV & Portfolio Review\n‚úÖ Mock Interview\n‚úÖ Job Connect\n‚úÖ Career Mentoring\nB·∫°n quan t√¢m ƒë·∫øn v·ªã tr√≠ n√†o?"
        ],

        experience: [
            "V·ªõi ng∆∞·ªùi ƒë√£ c√≥ kinh nghi·ªám, ch√∫ng t√¥i c√≥:\nüî• Advanced Courses\nüî• Tech Leader Path\nüî• System Design\nüî• Microservices",
            "Kh√≥a h·ªçc n√¢ng cao bao g·ªìm:\nüìö Design Patterns\nüìö Clean Architecture\nüìö DevOps CI/CD\nüìö Cloud Native",
            "Senior Developer Path:\nüöÄ Technical Leadership\nüöÄ System Optimization\nüöÄ Team Management\nüöÄ Architecture Design"
        ],

        pricing: [
            "H·ªçc ph√≠ linh ho·∫°t theo l·ªô tr√¨nh:\nüí∞ Fundamental: 12M\nüí∞ Professional: 25M\nüí∞ Advanced: 35M\nTr·∫£ g√≥p 0% l√£i su·∫•t trong 12 th√°ng!",
            "∆Øu ƒë√£i ƒë·∫∑c bi·ªát:\nüéÅ Gi·∫£m 20% khi ƒëƒÉng k√Ω combo\nüéÅ H·ªçc th·ª≠ 3 bu·ªïi mi·ªÖn ph√≠\nüéÅ T·∫∑ng kh√≥a h·ªçc AWS/Docker\nüéÅ Career Coaching 1-1",
            "Investment cho s·ª± nghi·ªáp:\nüìà Fundamental: 4M/th√°ng\nüìà Professional: 6M/th√°ng\nüìà Advanced: 8M/th√°ng\nRoi trung b√¨nh: 300%/nƒÉm"
        ]
    };

    // H√†m ph√¢n t√≠ch n·ªôi dung tin nh·∫Øn
    const analyzeMessage = (msg: string): string => {
        msg = msg.toLowerCase();
        
        if (msg.match(/\b(hi|hello|ch√†o|xin ch√†o|hey)\b/)) {
            return 'greetings';
        }
        
        if (msg.match(/\b(m·ªõi|b·∫Øt ƒë·∫ßu|start|beginner|basic|c∆° b·∫£n|zero|ch∆∞a bi·∫øt)\b/)) {
            return 'beginner';
        }
        
        if (msg.match(/\b(frontend|react|vue|angular|ui|giao di·ªán|web|website)\b/)) {
            return 'frontend';
        }
        
        if (msg.match(/\b(backend|server|database|api|nodejs|python|java)\b/)) {
            return 'backend';
        }
        
        if (msg.match(/\b(job|vi·ªác|l∆∞∆°ng|career|ngh·ªÅ|tuy·ªÉn d·ª•ng|vi·ªác l√†m)\b/)) {
            return 'career';
        }
        
        if (msg.match(/\b(kinh nghi·ªám|senior|advanced|expert|chuy√™n s√¢u|cao c·∫•p)\b/)) {
            return 'experience';
        }
        
        if (msg.match(/\b(gi√°|h·ªçc ph√≠|price|chi ph√≠|ph√≠|ti·ªÅn|ƒë√≥ng|ƒëƒÉng k√Ω)\b/)) {
            return 'pricing';
        }
        
        return 'default';
    };

    // H√†m l·∫•y c√¢u tr·∫£ l·ªùi ng·∫´u nhi√™n t·ª´ danh s√°ch
    const getRandomResponse = (category: string): string => {
        if (category === 'default') return autoResponses.default;
        const responses = autoResponses[category as keyof typeof autoResponses] as string[];
        return responses[Math.floor(Math.random() * responses.length)];
    };

    const [messages, setMessages] = useState<{ text: string; isUser: boolean }[]>([
        { text: "Xin ch√†o! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa EDUPATH üëã", isUser: false },
        { text: "T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?", isUser: false }
    ]);

    const handleSubmit = (e: React.FormEvent) => {
        e.preventDefault();
        if (message.trim()) {
            setMessages(prev => [...prev, { text: message, isUser: true }]);
            
            const messageType = analyzeMessage(message);
            const response = getRandomResponse(messageType);
            
            setMessage('');
            setIsTyping(true);
            
            // G·ª≠i c√¢u tr·∫£ l·ªùi ch√≠nh
            setTimeout(() => {
                setIsTyping(false);
                setMessages(prev => [...prev, { text: response, isUser: false }]);
                
                // Th√™m c√¢u h·ªèi follow-up sau 1 gi√¢y
                setTimeout(() => {
                    const followUp = getFollowUpQuestion(messageType);
                    setMessages(prev => [...prev, { text: followUp, isUser: false }]);
                }, 1000);
            }, 1500);
        }
    };

    // Avatar URLs
    const botAvatar = "https://static.vecteezy.com/system/resources/previews/022/739/948/non_2x/chatbot-robo-advisor-chat-bot-robot-like-assistant-concept-of-digital-advisor-avatar-to-help-the-customer-icon-vector.jpg"; // Link ƒë·∫øn avatar bot
    const userAvatar = "https://phongreviews.com/wp-content/uploads/2022/11/avatar-facebook-mac-dinh-19.jpg"; // Link ƒë·∫øn avatar user m·∫∑c ƒë·ªãnh

    const toggleChat = () => {
        setIsOpen(!isOpen);
    };

    // Th√™m g·ª£i √Ω sau m·ªói tin nh·∫Øn
    const getFollowUpQuestion = (category: string): string => {
        switch(category) {
            case 'beginner':
                return "B·∫°n mu·ªën b·∫Øt ƒë·∫ßu t·ª´ Frontend hay Backend?";
            case 'frontend':
                return "B·∫°n ƒë√£ c√≥ kinh nghi·ªám v·ªõi HTML/CSS ch∆∞a?";
            case 'backend':
                return "B·∫°n ƒë√£ h·ªçc qua ng√¥n ng·ªØ l·∫≠p tr√¨nh n√†o ch∆∞a?";
            case 'career':
                return "B·∫°n mong mu·ªën m·ª©c l∆∞∆°ng kh·ªüi ƒëi·ªÉm bao nhi√™u?";
            case 'experience':
                return "B·∫°n mu·ªën ph√°t tri·ªÉn theo h∆∞·ªõng Technical Lead hay Solution Architect?";
            case 'pricing':
                return "B·∫°n quan t√¢m ƒë·∫øn h√¨nh th·ª©c h·ªçc ph√≠ tr·∫£ g√≥p kh√¥ng?";
            default:
                return "B·∫°n c·∫ßn t∆∞ v·∫•n th√™m v·ªÅ v·∫•n ƒë·ªÅ g√¨?";
        }
    };

    return (
        <div className="chatbox-container">
            <button 
                className={`chat-toggle-btn ${isOpen ? 'open' : ''}`}
                onClick={toggleChat}
                aria-label="Toggle chat"
            >
                {isOpen ? <FaTimes /> : <FaComments />}
            </button>

            <div className={`chat-window ${isOpen ? 'open' : ''}`}>
                <div className="chat-header">
                    <div className="header-info">
                        <img src={botAvatar} alt="Bot Avatar" className="bot-avatar" />
                        <div>
                            <h4>EDUPATH Support</h4>
                            <span className="status">Online</span>
                        </div>
                    </div>
                    <button className="close-btn" onClick={toggleChat}>
                        <FaTimes />
                    </button>
                </div>

                <div className="messages-container">
                    {messages.map((msg, index) => (
                        <div key={index} className="message-wrapper">
                            {!msg.isUser && (
                                <img src={botAvatar} alt="Bot" className="message-avatar" />
                            )}
                            <div className={`message ${msg.isUser ? 'user-message' : 'bot-message'}`}>
                                {msg.text}
                            </div>
                            {msg.isUser && (
                                <img src={userAvatar} alt="User" className="message-avatar user-avatar" />
                            )}
                        </div>
                    ))}
                    {isTyping && (
                        <div className="message-wrapper">
                            <img src={botAvatar} alt="Bot" className="message-avatar" />
                            <div className="typing-indicator">
                                <div className="typing-dot"></div>
                                <div className="typing-dot"></div>
                                <div className="typing-dot"></div>
                            </div>
                        </div>
                    )}
                </div>

                <form onSubmit={handleSubmit} className="chat-input-container">
                    <input
                        type="text"
                        value={message}
                        onChange={(e) => setMessage(e.target.value)}
                        placeholder="Nh·∫≠p tin nh·∫Øn..."
                        className="chat-input"
                    />
                    <button type="submit" className="send-btn">
                        <FaPaperPlane />
                    </button>
                </form>
            </div>
        </div>
    );
};

export default ChatBox; 